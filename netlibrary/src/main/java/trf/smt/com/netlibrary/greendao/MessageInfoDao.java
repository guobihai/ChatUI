package trf.smt.com.netlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import trf.smt.com.netlibrary.enity.MessageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "MESSAGE_INFO".
 */
public class MessageInfoDao extends AbstractDao<MessageInfo, Long> {

    public static final String TABLENAME = "MESSAGE_INFO";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Filepath = new Property(3, String.class, "filepath", false, "FILEPATH");
        public final static Property SendState = new Property(4, int.class, "sendState", false, "SEND_STATE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Header = new Property(6, String.class, "header", false, "HEADER");
        public final static Property ImageUrl = new Property(7, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property VoiceTime = new Property(8, long.class, "voiceTime", false, "VOICE_TIME");
        public final static Property MsgId = new Property(9, String.class, "msgId", false, "MSG_ID");
        public final static Property MsgType = new Property(10, int.class, "msgType", false, "MSG_TYPE");
        public final static Property LoginUserId = new Property(11, String.class, "loginUserId", false, "LOGIN_USER_ID");
        public final static Property IsGoup = new Property(12, boolean.class, "isGoup", false, "IS_GOUP");
        public final static Property FromUser = new Property(13, String.class, "fromUser", false, "FROM_USER");
        public final static Property ToUser = new Property(14, String.class, "toUser", false, "TO_USER");
        public final static Property IsSend = new Property(15, int.class, "isSend", false, "IS_SEND");
        public final static Property IsRead = new Property(16, boolean.class, "isRead", false, "IS_READ");
        public final static Property WxUserId = new Property(17, String.class, "wxUserId", false, "WX_USER_ID");
        public final static Property NickName = new Property(18, String.class, "nickName", false, "NICK_NAME");
        public final static Property IsWx = new Property(19, boolean.class, "isWx", false, "IS_WX");
    }


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }

    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"CONTENT\" TEXT," + // 2: content
                "\"FILEPATH\" TEXT," + // 3: filepath
                "\"SEND_STATE\" INTEGER NOT NULL ," + // 4: sendState
                "\"TIME\" TEXT," + // 5: time
                "\"HEADER\" TEXT," + // 6: header
                "\"IMAGE_URL\" TEXT," + // 7: imageUrl
                "\"VOICE_TIME\" INTEGER NOT NULL ," + // 8: voiceTime
                "\"MSG_ID\" TEXT," + // 9: msgId
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 10: msgType
                "\"LOGIN_USER_ID\" TEXT," + // 11: loginUserId
                "\"IS_GOUP\" INTEGER NOT NULL ," + // 12: isGoup
                "\"FROM_USER\" TEXT," + // 13: fromUser
                "\"TO_USER\" TEXT," + // 14: toUser
                "\"IS_SEND\" INTEGER NOT NULL ," + // 15: isSend
                "\"IS_READ\" INTEGER NOT NULL ," + // 16: isRead
                "\"WX_USER_ID\" TEXT," + // 17: wxUserId
                "\"NICK_NAME\" TEXT," + // 18: nickName
                "\"IS_WX\" INTEGER NOT NULL );"); // 19: isWx
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageInfo entity) {
        stmt.clearBindings();

        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getType());

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }

        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(4, filepath);
        }
        stmt.bindLong(5, entity.getSendState());

        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }

        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(7, header);
        }

        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(8, imageUrl);
        }
        stmt.bindLong(9, entity.getVoiceTime());

        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(10, msgId);
        }
        stmt.bindLong(11, entity.getMsgType());

        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(12, loginUserId);
        }
        stmt.bindLong(13, entity.getIsGoup() ? 1L: 0L);

        String fromUser = entity.getFromUser();
        if (fromUser != null) {
            stmt.bindString(14, fromUser);
        }

        String toUser = entity.getToUser();
        if (toUser != null) {
            stmt.bindString(15, toUser);
        }
        stmt.bindLong(16, entity.getIsSend());
        stmt.bindLong(17, entity.getIsRead() ? 1L: 0L);

        String wxUserId = entity.getWxUserId();
        if (wxUserId != null) {
            stmt.bindString(18, wxUserId);
        }

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(19, nickName);
        }
        stmt.bindLong(20, entity.getIsWx() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();

        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getType());

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }

        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(4, filepath);
        }
        stmt.bindLong(5, entity.getSendState());

        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }

        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(7, header);
        }

        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(8, imageUrl);
        }
        stmt.bindLong(9, entity.getVoiceTime());

        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(10, msgId);
        }
        stmt.bindLong(11, entity.getMsgType());

        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(12, loginUserId);
        }
        stmt.bindLong(13, entity.getIsGoup() ? 1L: 0L);

        String fromUser = entity.getFromUser();
        if (fromUser != null) {
            stmt.bindString(14, fromUser);
        }

        String toUser = entity.getToUser();
        if (toUser != null) {
            stmt.bindString(15, toUser);
        }
        stmt.bindLong(16, entity.getIsSend());
        stmt.bindLong(17, entity.getIsRead() ? 1L: 0L);

        String wxUserId = entity.getWxUserId();
        if (wxUserId != null) {
            stmt.bindString(18, wxUserId);
        }

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(19, nickName);
        }
        stmt.bindLong(20, entity.getIsWx() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
                cursor.getInt(offset + 1), // type
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filepath
                cursor.getInt(offset + 4), // sendState
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // header
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imageUrl
                cursor.getLong(offset + 8), // voiceTime
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // msgId
                cursor.getInt(offset + 10), // msgType
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // loginUserId
                cursor.getShort(offset + 12) != 0, // isGoup
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fromUser
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // toUser
                cursor.getInt(offset + 15), // isSend
                cursor.getShort(offset + 16) != 0, // isRead
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // wxUserId
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // nickName
                cursor.getShort(offset + 19) != 0 // isWx
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilepath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendState(cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeader(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVoiceTime(cursor.getLong(offset + 8));
        entity.setMsgId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMsgType(cursor.getInt(offset + 10));
        entity.setLoginUserId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsGoup(cursor.getShort(offset + 12) != 0);
        entity.setFromUser(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setToUser(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsSend(cursor.getInt(offset + 15));
        entity.setIsRead(cursor.getShort(offset + 16) != 0);
        entity.setWxUserId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNickName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsWx(cursor.getShort(offset + 19) != 0);
    }

    @Override
    protected final Long updateKeyAfterInsert(MessageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(MessageInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
