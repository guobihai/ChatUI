package trf.smt.com.netlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import trf.smt.com.netlibrary.enity.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property ConRemark = new Property(3, String.class, "conRemark", false, "CON_REMARK");
        public final static Property IconUrl = new Property(4, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Letters = new Property(6, String.class, "letters", false, "LETTERS");
    }


    public PersonDao(DaoConfig config) {
        super(config);
    }

    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"CON_REMARK\" TEXT," + // 3: conRemark
                "\"ICON_URL\" TEXT," + // 4: iconUrl
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"LETTERS\" TEXT);"); // 6: letters
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();

        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }

        String conRemark = entity.getConRemark();
        if (conRemark != null) {
            stmt.bindString(4, conRemark);
        }

        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
        stmt.bindLong(6, entity.getType());

        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(7, letters);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();

        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }

        String conRemark = entity.getConRemark();
        if (conRemark != null) {
            stmt.bindString(4, conRemark);
        }

        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
        stmt.bindLong(6, entity.getType());

        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(7, letters);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // conRemark
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iconUrl
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // letters
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setConRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIconUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setLetters(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }

    @Override
    protected final Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Person entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
